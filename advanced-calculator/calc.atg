import java.lang.Exception;
import java.util.ArrayList;

COMPILER AdvCalc

	Interpreter aci;

	public void setInterpreter(Interpreter aci) {
		this.aci = aci;
	}

CHARACTERS
	digit = "0123456789".
	letter = 'A'..'Z' + 'a'..'z'.

TOKENS
	number = digit {digit} [ '.' digit {digit} ].
	ident = letter {digit | letter }.

IGNORE '\n' + '\r' + '\t'

PRODUCTIONS
	AdvCalc 										(. ASTExp exp; .)
	= CExp<out exp>							(. try {
											   					ASTExp res = aci.eval(exp);
																	System.out.println(" " + res.valor);
											   				} catch (Exception e) {
																	System.err.println(" Error: " + e.getMessage());
												 				}
															.)
	EOF
	.
	// ----------------------------------------
	CExp<out ASTExp v> 					(. v = null; ASTExp exp; .)
	= Def<out exp>							(. v = exp; .)
	| Exp<out exp> 							(. v = exp; .)
	.
	// ----------------------------------------
	Def<out ASTExp def> 				(.
																Objeto objeto = null;
																def = new ASTExp();
																ASTExp exp;
	 														.)
  =
	"def" ident									(.
																String identificador = t.val;
																ArrayList<String> paramNames;
															.)
	(
	"("
															(.
															def.tipo = "DEFINICAO_FUNCAO";
															objeto = Objeto.addFuncao(identificador);
															def.funcao = objeto;
															aci.escopoAtual.inserir(objeto);
															objeto.escopo.escopoSuperior = aci.escopoAtual;
															aci.escopoAtual = objeto.escopo;
.)
	ParamNames<out paramNames>	(. objeto.paramNames = paramNames; .)
	")"
	|														(.
																def.tipo = "DEFINICAO_VARIAVEL";
																objeto = Objeto.addVariavel(identificador);
																def.variavel = objeto;
																//System.out.println(objeto.identificador + " = " + objeto.valor);
																aci.escopoAtual.inserir(objeto);
															.)
	)
	"="
	Exp<out exp>							(.
															objeto.expressao = exp;
															if(objeto.tipo == "FUNCAO"){
																aci.escopoAtual = aci.escopoAtual.escopoSuperior;
															}
														.)
	.
	// ----------------------------------------
	ParamNames<out ArrayList<String> paramNames>	(. paramNames = new ArrayList<String>(); .)
	= ident										(.
															aci.escopoAtual.inserir(Objeto.addVariavel(t.val));
															paramNames.add(t.val);
														.)
	{ "," ident								(.
															aci.escopoAtual.inserir(Objeto.addVariavel(t.val));
															paramNames.add(t.val);
														.)
 	}
	.
	// ----------------------------------------
	Exp<out ASTExp exp>				(.
															exp = null;
															ASTExp t;
															ASTExp operando;
	 													.)
	=
		T<out t>								(. exp = t; .)
		{
														(.
															operando = exp;
															exp = new ASTExp();
															ASTExp node = new ASTExp();
															node.tipo = "OPERACAO";
															node.operando1 = operando;
															exp = node;
														.)
			(
			"+" T<out t>					(.
															exp.operando2 = t;
															exp.operacao = "+";
														.)
			| "-" T<out t>				(.
															exp.operando2 = t;
															exp.operacao = "-";
														.)
			)
		}
		.
	// ----------------------------------------
	T<out ASTExp t> 					(.
															t = null;
															ASTExp u;
															ASTExp operando;
														.)
	=
		U<out u>								(. t = u; .)
		{												(.
															operando = t;
															t = new ASTExp();
															ASTExp node = new ASTExp();
															node.tipo = "OPERACAO";
															node.operando1 = operando;
															t = node;
														.)
			(
			"*" U<out u>					(.
															t.operando2 = u;
															t.operacao = "*";
														.)
			| "/" U<out u>				(.
															t.operando2 = u;
															t.operacao = "/";
														.)
			| "%" U<out u>				(.
															t.operando2 = u;
															t.operacao = "%";
														.)
			)
		}
		.
  // ----------------------------------------
	U<out ASTExp u> 					(.
															u = null;
															ASTExp f;
														.)
	=
		(
			"-" F<out f> 					(.
															ASTExp node = new ASTExp();
															u = new ASTExp();
															node.tipo = "SINAL";
															node.operando1 = f;
															u = node;
			 											.)

			| F<out f> 						(.
			 												u = f;
							 							.)
		)
		.
	// ----------------------------------------
	F<out ASTExp f> 					(.
																f = null;
																ASTExp exp;
														.)
	=
		number 									(.
															ASTExp node = new ASTExp();
															f = new ASTExp();
															node.tipo = "LITERAL_DOUBLE";
															node.valor = Double.parseDouble(t.val);
															f = node;
														.)

		| VarOrFunc<out exp>    (. f = exp; .)
		| IFExp<out exp>				(. f = exp; .)
		| "(" Exp<out exp> ")"  (. f = exp; .)
		| SeqExp<out exp>				(. f = exp; .)
	.
	// ----------------------------------------
	SeqExp<out ASTExp seq> 		(.
															seq = new ASTExp();
															seq.tipo = "SEQUENCIA_EXPRESSOES";
															seq.sequenciaExpressoes = new ArrayList<ASTExp>();
															ASTExp exp;
															Objeto objeto = new Objeto();
															// TO-DO implementar sequencia de expressoes
															//objeto.novaSequenciaExpressoes();
															// TO-DO implementar escopo atual
														.)
	=
	"{"
	CExp<out exp>									(. seq.sequenciaExpressoes.add(exp); .)
	{ ";" CExp<out exp>						(. seq.sequenciaExpressoes.add(exp); .)
 	}
	"}"														(. this.aci.escopoAtual = aci.escopoAtual.escopoSuperior; .)
	.
	// ----------------------------------------
	VarOrFunc<out ASTExp varFunc> (.
																	varFunc = null;
																	ASTExp exp;
																	ArrayList<ASTExp> params;
	 															.)
	= ident 											(. String valorVariavel = t.val; .)
	(
	"("														(.
																	varFunc = new ASTExp();
																	varFunc.tipo = "CHAMADA_FUNCAO";
																	varFunc.variavel = aci.escopoAtual.buscar(valorVariavel);
																	if (varFunc.variavel == null) {
																		System.out.println(" Error: '" + valorVariavel + "' nao definido.");
																	} else if (varFunc.variavel.tipo != "FUNCAO") {
																		System.out.println(" Error: Funcao nao definida");
																	}
																.)
	Params<out params>						(.
																	if (varFunc.funcao != null) {
																		varFunc.paramChamadaFuncao = params;
																		varFunc.paramChamadaFuncaoVar = new ArrayList<Objeto>();
																		for (int i = 0; i < varFunc.funcao.paramNames.size(); i++) {
																			varFunc.paramChamadaFuncaoVar.add(varFunc.funcao.escopo.buscar(varFunc.funcao.paramNames.get(i)));
																		}
																		if (varFunc.paramChamadaFuncaoVar.size() != varFunc.funcao.paramNames.size()) {
																			System.out.println(" Error: Observe os parametros.");
																		}
																	}
																.)
	")"
	| 														(.
																	varFunc = new ASTExp();
																	varFunc.tipo = "VARIAVEL";
																	varFunc.variavel = aci.escopoAtual.buscar(valorVariavel);
																	if (varFunc.variavel == null) {
																		System.out.println(" Error: '" + valorVariavel + "' nao definido.");
																	} else if (varFunc.variavel.tipo != "VARIAVEL") {
																		System.out.println(" Error: Variavel nao definida");
																	}
																.)
	)
	.
	// ----------------------------------------
	Params<out ArrayList<ASTExp> parametros>	(.
																							parametros = new ArrayList<ASTExp>();
																							ASTExp exp;
																						.)
	= Exp<out exp>														(. parametros.add(exp); .)
	{ "," Exp<out exp>												(. parametros.add(exp); .)
	}
	.
	// ----------------------------------------
	IFExp<out ASTExp ifCond> 		(.
																ASTExp exp;
	 															ASTExp condicao;
																ifCond = new ASTExp();
																ifCond.tipo = "CONDICAO";
															.)
	=
	"if" ExpL<out condicao>			(. ifCond.condicao = condicao; .)
	"then" Exp<out exp>					(. ifCond.condicaoThen = exp; .)
	"else" Exp<out exp>					(. ifCond.condicaoElse = exp; .)
	.
	// ----------------------------------------
	ExpL<out ASTExp expl> 			(.
																ASTExp exp;
																String operacao = "";
																expl = new ASTExp();
																expl.tipo = "OPERACAO";
															.)
	=
	Exp<out exp>								(. expl.operando1 = exp; .)
	OpRel<out operacao>					(. expl.operacao = operacao; .)
	Exp<out exp>								(. expl.operando2 = exp; .)
	.
	// ----------------------------------------
	OpRel<out String operacao> 	(. operacao = ""; .)
	= ">"												(. operacao = t.val; .)
	| ">="											(. operacao = t.val; .)
	| "<"												(. operacao = t.val; .)
	| "&<="											(. operacao = t.val; .)
	| "="												(. operacao = t.val; .)
	| "!="											(. operacao = t.val; .)
	.

END AdvCalc.
